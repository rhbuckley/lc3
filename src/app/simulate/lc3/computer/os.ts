/*
 * These service routines are provided by Brian J. Hartman
 * under the following license:
 *
 * This software is provided "AS IS".  No warranty is expressed or implied.
 * Permission to copy without fee all or part of this material is granted
 * provided that the copies are not made or distributed for direct commercial
 * advantage, this copyright notice is included, and notice that copying is
 * by permission of the author of this software.  To copy otherwise, or to
 * republish, requires a fee and/or specific written permission from the author.

 * Copyright (c) 1998 - 2003 Brian J. Hartman
 * brianhartman@hotmail.com
 */

const symbolTable = {
    TRAP_GETC: 0x0400,
    TRAP_OUT: 0x0430,
    TRAP_PUTS: 0x0450,
    TRAP_IN: 0x04a0,
    TRAP_PUTSP: 0x04e0,
    TRAP_HALT: 0xfd70,
};

const memory = (() => {
    let defaultMemory = {
        //
        // Trap vector table (valid entries)
        0x0020: 0x0400,
        0x0021: 0x0430,
        0x0022: 0x0450,
        0x0023: 0x04a0,
        0x0024: 0x04e0,
        0x0025: 0xfd70,
        //
        // Implementation of GETC
        0x0400: 0x3e07,
        0x0401: 0xa004,
        0x0402: 0x07fe,
        0x0403: 0xa003,
        0x0404: 0x2e03,
        0x0405: 0xc1c0,
        0x0406: 0xfe00,
        0x0407: 0xfe02,
        //
        // Implementation of OUT
        0x0430: 0x3e0a,
        0x0431: 0x3208,
        0x0432: 0xa205,
        0x0433: 0x07fe,
        0x0434: 0xb004,
        0x0435: 0x2204,
        0x0436: 0x2e04,
        0x0437: 0xc1c0,
        0x0438: 0xfe04,
        0x0439: 0xfe06,
        //
        // Implementation of PUTS
        0x0450: 0x3e16,
        0x0451: 0x3012,
        0x0452: 0x3212,
        0x0453: 0x3412,
        0x0454: 0x6200,
        0x0455: 0x0405,
        0x0456: 0xa409,
        0x0457: 0x07fe,
        0x0458: 0xb208,
        0x0459: 0x1021,
        0x045a: 0x0ff9,
        0x045b: 0x2008,
        0x045c: 0x2208,
        0x045d: 0x2408,
        0x045e: 0x2e08,
        0x045f: 0xc1c0,
        0x0460: 0xfe04,
        0x0461: 0xfe06,
        0x0462: 0xf3fd,
        0x0463: 0xf3fe,
        //
        // Implementation of IN
        0x04a0: 0x3e27,
        0x04a1: 0x3625,
        0x04a2: 0x3423,
        0x04a3: 0x3221,
        0x04a4: 0x201f,
        0x04a5: 0x4813,
        0x04a6: 0xe222,
        0x04a7: 0x6040,
        0x04a8: 0x0403,
        0x04a9: 0x480f,
        0x04aa: 0x1261,
        0x04ab: 0x0ffb,
        0x04ac: 0xa616,
        0x04ad: 0x07fe,
        0x04ae: 0xa013,
        0x04af: 0x1420,
        0x04b0: 0x4808,
        0x04b1: 0x2012,
        0x04b2: 0x4806,
        0x04b3: 0x10a0,
        0x04b4: 0x2210,
        0x04b5: 0x2410,
        0x04b6: 0x2610,
        0x04b7: 0x2e10,
        0x04b8: 0xc1c0,
        0x04b9: 0x3e05,
        0x04ba: 0xa606,
        0x04bb: 0x07fd,
        0x04bc: 0xb003,
        0x04bd: 0x2e01,
        0x04be: 0xc1c0,
        0x04c0: 0xfe06,
        0x04c1: 0xfe04,
        0x04c2: 0xfe02,
        0x04c3: 0xfe00,
        //
        // Implementation of PUTSP
        0x04e0: 0x3e27,
        0x04e1: 0x3022,
        0x04e2: 0x3222,
        0x04e3: 0x3422,
        0x04e4: 0x3622,
        0x04e5: 0x1220,
        0x04e6: 0x6040,
        0x04e7: 0x0406,
        0x04e8: 0x480d,
        0x04e9: 0x2418,
        0x04ea: 0x5002,
        0x04eb: 0x0402,
        0x04ec: 0x1261,
        0x04ed: 0x0ff8,
        0x04ee: 0x2014,
        0x04ef: 0x4806,
        0x04f0: 0x2013,
        0x04f1: 0x2213,
        0x04f2: 0x2413,
        0x04f3: 0x2613,
        0x04f4: 0x2e13,
        0x04f5: 0xc1c0,
        0x04f6: 0x3e06,
        0x04f7: 0xa607,
        0x04f8: 0x0801,
        0x04f9: 0x0ffc,
        0x04fa: 0xb003,
        0x04fb: 0x2e01,
        0x04fc: 0xc1c0,
        0x04fe: 0xfe06,
        0x04ff: 0xfe04,
        0x0500: 0xf3fd,
        0x0501: 0xf3fe,
        0x0502: 0xff00,
        //
        // Implementation of HALT
        0xfd00: 0x3e3e,
        0xfd01: 0x303c,
        0xfd02: 0x2007,
        0xfd03: 0xf021,
        0xfd04: 0xe006,
        0xfd05: 0xf022,
        0xfd06: 0xf025,
        0xfd07: 0x2036,
        0xfd08: 0x2e36,
        0xfd09: 0xc1c0,
        0xfd70: 0x3e0e,
        0xfd71: 0x320c,
        0xfd72: 0x300a,
        0xfd73: 0xe00c,
        0xfd74: 0xf022,
        0xfd75: 0xa22f,
        0xfd76: 0x202f,
        0xfd77: 0x5040,
        0xfd78: 0xb02c,
        0xfd79: 0x2003,
        0xfd7a: 0x2203,
        0xfd7b: 0x2e03,
        0xfd7c: 0xc1c0,
        //
        // 0xFD7D, 0xFD7E, and 0xFD7F are callee-saved register locations.
        // The "halting the processor" message
        // occupies addresses 0xFD80 through 0xFDA4, inclusive.
        //
        0xfda5: 0xfffe,
        0xfda6: 0x7fff,
        //
        // Display status register
        0xfe04: 0x8000,
        //
        // Machine control register
        0xfffe: 0xffff,
    } as Record<number, number>;

    // Fill in the bad trap vectors.
    for (let i = 0; i < 0xff; i++) {
        if (defaultMemory[i] === undefined) {
            defaultMemory[i] = 0xfd00;
        }
    }

    // Fill in the halting message.
    const haltMessage = "\n----- Halting the processor ----- \n\0";
    for (let i = 0; i < haltMessage.length; i++) {
        defaultMemory[0xfd80 + i] = haltMessage.charCodeAt(i);
    }

    return defaultMemory;
})();

export { symbolTable, memory };
